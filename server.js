const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000; // –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.static('public'));

// –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
const DATA_DIR = path.join(__dirname, 'data');
const FILES_DIR = path.join(__dirname, 'files');
const DB_FILE = path.join(DATA_DIR, 'db.json');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —Ç–∞ –ë–î
async function initializeStorage() {
    try {
        await fs.mkdir(DATA_DIR, { recursive: true });
        await fs.mkdir(FILES_DIR, { recursive: true });
        
        try {
            await fs.access(DB_FILE);
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–Ω–∞–π–¥–µ–Ω–∞');
        } catch {
            const initialDb = {
                users: [
                    { username: 'admin', password: 'password', name: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' }
                ],
                files: []
            };
            await fs.writeFile(DB_FILE, JSON.stringify(initialDb, null, 2));
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        }
        
        console.log('‚úÖ –°—Ö–æ–≤–∏—â–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    }
}

// –ß–∏—Ç–∞–Ω–Ω—è –ë–î
async function readDatabase() {
    try {
        const data = await fs.readFile(DB_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ë–î:', error);
        return { users: [], files: [] };
    }
}

// –ó–∞–ø–∏—Å –ë–î
async function writeDatabase(data) {
    try {
        await fs.writeFile(DB_FILE, JSON.stringify(data, null, 2));
        return true;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ë–î:', error);
        return false;
    }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–∞ –¥–∏—Å–∫
async function saveFileToDisk(fileId, fileData, fileType) {
    try {
        const fileName = `${fileId}`;
        const filePath = path.join(FILES_DIR, fileName);
        
        if (fileType.startsWith('image/')) {
            // –î–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ base64
            await fs.writeFile(filePath, fileData, 'utf8');
        } else {
            // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            await fs.writeFile(filePath, fileData, 'utf8');
        }
        
        return fileName;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
        throw error;
    }
}

// –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –¥–∏—Å–∫—É
async function readFileFromDisk(fileName, fileType) {
    try {
        const filePath = path.join(FILES_DIR, fileName);
        return await fs.readFile(filePath, 'utf8');
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
        throw error;
    }
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –¥–∏—Å–∫—É
async function deleteFileFromDisk(fileName) {
    try {
        const filePath = path.join(FILES_DIR, fileName);
        await fs.unlink(filePath);
        return true;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
        return false;
    }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
async function fileExists(fileName) {
    try {
        const filePath = path.join(FILES_DIR, fileName);
        await fs.access(filePath);
        return true;
    } catch {
        return false;
    }
}

// ============ API ENDPOINTS ============

// Health check
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: '–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î',
        timestamp: new Date().toISOString(),
        storage: {
            dataDir: DATA_DIR,
            filesDir: FILES_DIR
        }
    });
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
app.post('/api/auth/login', async (req, res) => {
    const { username, password } = req.body;
    
    if (!username || !password) {
        return res.status(400).json({ 
            success: false, 
            error: 'Username —Ç–∞ password –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' 
        });
    }
    
    const db = await readDatabase();
    const user = db.users.find(u => u.username === username && u.password === password);
    
    if (user) {
        console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${username} —É–≤—ñ–π—à–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É`);
        res.json({ 
            success: true, 
            user: { 
                username: user.username, 
                name: user.name 
            } 
        });
    } else {
        console.log(`‚ùå –ù–µ–≤–¥–∞–ª–∞ —Å–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É: ${username}`);
        res.status(401).json({ 
            success: false, 
            error: '–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É' 
        });
    }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ)
app.get('/api/files', async (req, res) => {
    const { userId } = req.query;
    
    if (!userId) {
        return res.status(400).json({ 
            success: false, 
            error: 'userId –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' 
        });
    }
    
    const db = await readDatabase();
    const userFiles = db.files.filter(f => f.userId === userId);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –Ω–∞ –¥–∏—Å–∫—É
    const filesWithStatus = await Promise.all(
        userFiles.map(async (f) => {
            const exists = await fileExists(f.fileName);
            return {
                id: f.id,
                userId: f.userId,
                name: f.name,
                type: f.type,
                size: f.size,
                uploader: f.uploader,
                createdDate: f.createdDate,
                modifiedDate: f.modifiedDate,
                fileName: f.fileName,
                fileExists: exists
            };
        })
    );
    
    console.log(`üìÇ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}: ${filesWithStatus.length} —Ñ–∞–π–ª—ñ–≤`);
    
    res.json({ 
        success: true, 
        files: filesWithStatus,
        count: filesWithStatus.length
    });
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑ –≤–º—ñ—Å—Ç–æ–º
app.get('/api/files/:fileId', async (req, res) => {
    const { fileId } = req.params;
    const { userId } = req.query;
    
    if (!userId) {
        return res.status(400).json({ 
            success: false, 
            error: 'userId –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' 
        });
    }
    
    const db = await readDatabase();
    const file = db.files.find(f => f.id === fileId && f.userId === userId);
    
    if (!file) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${fileId}`);
        return res.status(404).json({ 
            success: false, 
            error: '–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' 
        });
    }
    
    try {
        // –ß–∏—Ç–∞—î–º–æ –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É –∑ –¥–∏—Å–∫—É
        const fileData = await readFileFromDisk(file.fileName, file.type);
        
        console.log(`üì• –§–∞–π–ª ${file.name} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
        
        res.json({
            success: true,
            file: {
                ...file,
                data: fileData
            }
        });
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}:`, error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É'
        });
    }
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
app.post('/api/files', async (req, res) => {
    const { userId, id, name, type, size, uploader, data } = req.body;
    
    if (!userId || !name || !data) {
        return res.status(400).json({ 
            success: false, 
            error: '–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è' 
        });
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É —Ñ–∞–π–ª—É
    const allowedExtensions = ['.js', '.png'];
    const ext = '.' + name.split('.').pop().toLowerCase();
    
    if (!allowedExtensions.includes(ext)) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –î–æ–∑–≤–æ–ª–µ–Ω—ñ: .js, .png' 
        });
    }
    
    try {
        const db = await readDatabase();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î
        const existingFileIndex = db.files.findIndex(f => f.id === id && f.userId === userId);
        
        const fileId = id || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        const fileName = await saveFileToDisk(fileId, data, type);
        
        const fileMetadata = {
            id: fileId,
            userId,
            name,
            type: type || 'application/octet-stream',
            size: size || data.length,
            uploader: uploader || 'Unknown',
            fileName,
            createdDate: existingFileIndex !== -1 ? db.files[existingFileIndex].createdDate : new Date().toISOString(),
            modifiedDate: new Date().toISOString()
        };
        
        if (existingFileIndex !== -1) {
            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª
            const oldFileName = db.files[existingFileIndex].fileName;
            
            // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª —è–∫—â–æ –≤—ñ–Ω —ñ–Ω—à–∏–π
            if (oldFileName !== fileName) {
                await deleteFileFromDisk(oldFileName);
            }
            
            db.files[existingFileIndex] = fileMetadata;
            console.log(`üîÑ –§–∞–π–ª ${name} –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
        } else {
            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª
            db.files.push(fileMetadata);
            console.log(`‚úÖ –ù–æ–≤–∏–π —Ñ–∞–π–ª ${name} –¥–æ–¥–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
        }
        
        await writeDatabase(db);
        
        res.json({ 
            success: true, 
            message: '–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ',
            file: fileMetadata
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
        res.status(500).json({ 
            success: false, 
            error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É' 
        });
    }
});

// –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É
app.delete('/api/files/:fileId', async (req, res) => {
    const { fileId } = req.params;
    const { userId } = req.query;
    
    if (!userId) {
        return res.status(400).json({ 
            success: false, 
            error: 'userId –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' 
        });
    }
    
    const db = await readDatabase();
    const fileIndex = db.files.findIndex(f => f.id === fileId && f.userId === userId);
    
    if (fileIndex === -1) {
        console.log(`‚ùå –§–∞–π–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${fileId}`);
        return res.status(404).json({ 
            success: false, 
            error: '–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' 
        });
    }
    
    try {
        // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –∑ –¥–∏—Å–∫—É
        const fileName = db.files[fileIndex].fileName;
        const deleted = await deleteFileFromDisk(fileName);
        
        if (!deleted) {
            console.log(`‚ö†Ô∏è –§–∞–π–ª ${fileName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –¥–∏—Å–∫—É, –∞–ª–µ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ë–î`);
        }
        
        const deletedFile = db.files[fileIndex];
        
        // –í–∏–¥–∞–ª—è—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑ –ë–î
        db.files.splice(fileIndex, 1);
        await writeDatabase(db);
        
        console.log(`üóëÔ∏è –§–∞–π–ª ${deletedFile.name} –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
        
        res.json({ 
            success: true, 
            message: '–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' 
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
        res.status(500).json({ 
            success: false, 
            error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É' 
        });
    }
});

// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª–∏
app.post('/api/sync', async (req, res) => {
    const { userId, localFileIds } = req.body;
    
    if (!userId) {
        return res.status(400).json({ 
            success: false, 
            error: 'userId –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' 
        });
    }
    
    try {
        const db = await readDatabase();
        const userFiles = db.files.filter(f => f.userId === userId);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª–∏ –∑ –≤–º—ñ—Å—Ç–æ–º
        const filesWithData = await Promise.all(
            userFiles.map(async (file) => {
                try {
                    const data = await readFileFromDisk(file.fileName, file.type);
                    return { ...file, data };
                } catch (error) {
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}:`, error);
                    return null;
                }
            })
        );
        
        const validFiles = filesWithData.filter(f => f !== null);
        
        console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}: ${validFiles.length} —Ñ–∞–π–ª—ñ–≤`);
        
        res.json({
            success: true,
            files: validFiles,
            localFileIds: localFileIds || []
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó'
        });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/stats', async (req, res) => {
    const { userId } = req.query;
    
    try {
        const db = await readDatabase();
        const userFiles = userId ? db.files.filter(f => f.userId === userId) : db.files;
        
        const stats = {
            totalFiles: userFiles.length,
            totalSize: userFiles.reduce((sum, f) => sum + (f.size || 0), 0),
            fileTypes: {},
            uploadsByUser: {}
        };
        
        userFiles.forEach(file => {
            const ext = '.' + file.name.split('.').pop().toLowerCase();
            stats.fileTypes[ext] = (stats.fileTypes[ext] || 0) + 1;
            stats.uploadsByUser[file.uploader] = (stats.uploadsByUser[file.uploader] || 0) + 1;
        });
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω–∞ –¥–ª—è ${userId || '–≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'}`);
        
        res.json({
            success: true,
            stats
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

// –ú–∞—Å–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
app.post('/api/files/bulk', async (req, res) => {
    const { userId, files } = req.body;
    
    if (!userId || !files || !Array.isArray(files)) {
        return res.status(400).json({ 
            success: false, 
            error: '–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∞–±–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç' 
        });
    }
    
    const results = [];
    const db = await readDatabase();
    
    for (const file of files) {
        try {
            const { id, name, type, size, uploader, data } = file;
            
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            const ext = '.' + name.split('.').pop().toLowerCase();
            if (!['.js', '.png'].includes(ext)) {
                results.push({ success: false, name, error: '–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø' });
                continue;
            }
            
            const fileId = id || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            const fileName = await saveFileToDisk(fileId, data, type);
            
            const fileMetadata = {
                id: fileId,
                userId,
                name,
                type: type || 'application/octet-stream',
                size: size || data.length,
                uploader: uploader || 'Unknown',
                fileName,
                createdDate: new Date().toISOString(),
                modifiedDate: new Date().toISOString()
            };
            
            const existingIndex = db.files.findIndex(f => f.id === fileId && f.userId === userId);
            
            if (existingIndex !== -1) {
                db.files[existingIndex] = fileMetadata;
            } else {
                db.files.push(fileMetadata);
            }
            
            results.push({ success: true, name, id: fileId });
        } catch (error) {
            results.push({ success: false, name: file.name, error: error.message });
        }
    }
    
    await writeDatabase(db);
    
    const successCount = results.filter(r => r.success).length;
    console.log(`üì¶ –ú–∞—Å–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è ${userId}: ${successCount}/${files.length} —É—Å–ø—ñ—à–Ω–æ`);
    
    res.json({
        success: true,
        results,
        totalProcessed: files.length,
        successCount
    });
});

// –û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.delete('/api/files', async (req, res) => {
    const { userId } = req.query;
    
    if (!userId) {
        return res.status(400).json({ 
            success: false, 
            error: 'userId –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' 
        });
    }
    
    try {
        const db = await readDatabase();
        const userFiles = db.files.filter(f => f.userId === userId);
        
        // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –∑ –¥–∏—Å–∫—É
        for (const file of userFiles) {
            await deleteFileFromDisk(file.fileName);
        }
        
        // –í–∏–¥–∞–ª—è—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑ –ë–î
        db.files = db.files.filter(f => f.userId !== userId);
        await writeDatabase(db);
        
        console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}: ${userFiles.length} —Ñ–∞–π–ª—ñ–≤`);
        
        res.json({
            success: true,
            message: '–í—Å—ñ —Ñ–∞–π–ª–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
            deletedCount: userFiles.length
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤'
        });
    }
});

// –ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤
app.get('/api/files/search', async (req, res) => {
    const { userId, query } = req.query;
    
    if (!userId || !query) {
        return res.status(400).json({ 
            success: false, 
            error: 'userId —Ç–∞ query –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' 
        });
    }
    
    try {
        const db = await readDatabase();
        const userFiles = db.files.filter(f => f.userId === userId);
        
        const lowerQuery = query.toLowerCase();
        const searchResults = userFiles.filter(file =>
            file.name.toLowerCase().includes(lowerQuery) ||
            file.uploader.toLowerCase().includes(lowerQuery) ||
            file.type.toLowerCase().includes(lowerQuery)
        );
        
        console.log(`üîç –ü–æ—à—É–∫ "${query}" –¥–ª—è ${userId}: –∑–Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ñ–∞–π–ª—ñ–≤`);
        
        res.json({
            success: true,
            files: searchResults,
            count: searchResults.length,
            query
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É'
        });
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤
app.get('/api/export', async (req, res) => {
    const { userId, format } = req.query;
    
    if (!userId) {
        return res.status(400).json({ 
            success: false, 
            error: 'userId –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' 
        });
    }
    
    try {
        const db = await readDatabase();
        const userFiles = db.files.filter(f => f.userId === userId);
        
        if (format === 'csv') {
            // –ï–∫—Å–ø–æ—Ä—Ç —É CSV
            const csvHeader = 'ID,Name,Type,Size,Uploader,Created,Modified\n';
            const csvRows = userFiles.map(f => 
                `${f.id},${f.name},${f.type},${f.size},${f.uploader},${f.createdDate},${f.modifiedDate}`
            ).join('\n');
            
            res.setHeader('Content-Type', 'text/csv');
            res.setHeader('Content-Disposition', `attachment; filename="files_${userId}_${Date.now()}.csv"`);
            res.send(csvHeader + csvRows);
        } else {
            // –ï–∫—Å–ø–æ—Ä—Ç —É JSON (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
            res.setHeader('Content-Type', 'application/json');
            res.setHeader('Content-Disposition', `attachment; filename="files_${userId}_${Date.now()}.json"`);
            res.json({
                userId,
                exportDate: new Date().toISOString(),
                filesCount: userFiles.length,
                files: userFiles
            });
        }
        
        console.log(`üì§ –ï–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª—ñ–≤ –¥–ª—è ${userId} —É —Ñ–æ—Ä–º–∞—Ç—ñ ${format || 'json'}`);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É'
        });
    }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
app.get('/api/storage/info', async (req, res) => {
    try {
        const db = await readDatabase();
        
        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ–≥–æ –º—ñ—Å—Ü—è
        let totalSize = 0;
        const fileSizes = {};
        
        for (const file of db.files) {
            totalSize += file.size || 0;
            fileSizes[file.userId] = (fileSizes[file.userId] || 0) + (file.size || 0);
        }
        
        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª–æ–≤—É —Å–∏—Å—Ç–µ–º—É
        const files = await fs.readdir(FILES_DIR);
        
        res.json({
            success: true,
            storage: {
                totalFiles: db.files.length,
                totalSize,
                totalSizeMB: (totalSize / (1024 * 1024)).toFixed(2),
                physicalFiles: files.length,
                usersSizes: fileSizes,
                dataDirectory: DATA_DIR,
                filesDirectory: FILES_DIR
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ö–æ–≤–∏—â–µ:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó'
        });
    }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
app.get('/api/storage/integrity', async (req, res) => {
    try {
        const db = await readDatabase();
        const issues = [];
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—é—Ç—å —Ñ–∞–π–ª–∏ –Ω–∞ –¥–∏—Å–∫—É
        for (const file of db.files) {
            const exists = await fileExists(file.fileName);
            if (!exists) {
                issues.push({
                    type: 'missing_file',
                    fileId: file.id,
                    fileName: file.name,
                    message: '–§–∞–π–ª –≤ –ë–î, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–∞ –¥–∏—Å–∫—É'
                });
            }
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏ –Ω–∞ –¥–∏—Å–∫—É –±–µ–∑ –∑–∞–ø–∏—Å—É –≤ –ë–î
        const diskFiles = await fs.readdir(FILES_DIR);
        const dbFileNames = new Set(db.files.map(f => f.fileName));
        
        for (const diskFile of diskFiles) {
            if (!dbFileNames.has(diskFile)) {
                issues.push({
                    type: 'orphan_file',
                    fileName: diskFile,
                    message: '–§–∞–π–ª –Ω–∞ –¥–∏—Å–∫—É –±–µ–∑ –∑–∞–ø–∏—Å—É –≤ –ë–î'
                });
            }
        }
        
        console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ: –∑–Ω–∞–π–¥–µ–Ω–æ ${issues.length} –ø—Ä–æ–±–ª–µ–º`);
        
        res.json({
            success: true,
            integrity: {
                isHealthy: issues.length === 0,
                totalFiles: db.files.length,
                diskFiles: diskFiles.length,
                issuesCount: issues.length,
                issues
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ'
        });
    }
});

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑—ñ —Å—Ö–æ–≤–∏—â–µ–º
app.post('/api/storage/repair', async (req, res) => {
    try {
        const db = await readDatabase();
        const repairs = [];
        
        // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ —Ñ–∞–π–ª–∏, —è–∫–∏—Ö –Ω–µ–º–∞—î –Ω–∞ –¥–∏—Å–∫—É
        const validFiles = [];
        for (const file of db.files) {
            const exists = await fileExists(file.fileName);
            if (exists) {
                validFiles.push(file);
            } else {
                repairs.push({
                    action: 'removed_metadata',
                    fileId: file.id,
                    fileName: file.name
                });
            }
        }
        
        db.files = validFiles;
        
        // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –Ω–∞ –¥–∏—Å–∫—É –±–µ–∑ –∑–∞–ø–∏—Å—É –≤ –ë–î
        const diskFiles = await fs.readdir(FILES_DIR);
        const dbFileNames = new Set(db.files.map(f => f.fileName));
        
        for (const diskFile of diskFiles) {
            if (!dbFileNames.has(diskFile)) {
                await deleteFileFromDisk(diskFile);
                repairs.push({
                    action: 'deleted_orphan',
                    fileName: diskFile
                });
            }
        }
        
        await writeDatabase(db);
        
        console.log(`üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ö–æ–≤–∏—â–∞: ${repairs.length} –æ–ø–µ—Ä–∞—Ü—ñ–π`);
        
        res.json({
            success: true,
            repairs: {
                count: repairs.length,
                operations: repairs
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ö–æ–≤–∏—â–∞:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ö–æ–≤–∏—â–∞'
        });
    }
});

// –ë–µ–∫–∞–ø –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
app.post('/api/backup', async (req, res) => {
    try {
        const db = await readDatabase();
        const backupFileName = `backup_${Date.now()}.json`;
        const backupPath = path.join(DATA_DIR, backupFileName);
        
        await fs.writeFile(backupPath, JSON.stringify(db, null, 2));
        
        console.log(`üíæ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–µ–∫–∞–ø: ${backupFileName}`);
        
        res.json({
            success: true,
            backup: {
                fileName: backupFileName,
                path: backupPath,
                timestamp: new Date().toISOString(),
                filesCount: db.files.length,
                usersCount: db.users.length
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É'
        });
    }
});

// –°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø—ñ–≤
app.get('/api/backups', async (req, res) => {
    try {
        const files = await fs.readdir(DATA_DIR);
        const backups = files
            .filter(f => f.startsWith('backup_') && f.endsWith('.json'))
            .map(f => {
                const timestamp = f.replace('backup_', '').replace('.json', '');
                return {
                    fileName: f,
                    timestamp: new Date(parseInt(timestamp)).toISOString(),
                    path: path.join(DATA_DIR, f)
                };
            })
            .sort((a, b) => b.timestamp.localeCompare(a.timestamp));
        
        res.json({
            success: true,
            backups,
            count: backups.length
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –±–µ–∫–∞–ø—ñ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –±–µ–∫–∞–ø—ñ–≤'
        });
    }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ 404
app.use((req, res) => {
    res.status(404).json({
        success: false,
        error: 'Endpoint –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        path: req.path
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
app.use((error, req, res, next) => {
    console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: error.message
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    await initializeStorage();
    
    app.listen(PORT, () => {
        console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ                      ‚ïë
‚ïë  üìç http://localhost:${PORT}              ‚ïë
‚ïë  üîß API: http://localhost:${PORT}/api     ‚ïë
‚ïë                                          ‚ïë
‚ïë  üìÇ –§–∞–π–ª–∏: ${FILES_DIR}        ‚ïë
‚ïë  üóÑÔ∏è  –ë–î: ${DB_FILE}            ‚ïë
‚ïë                                          ‚ïë
‚ïë  –î–æ—Å—Ç—É–ø–Ω—ñ endpoints:                     ‚ïë
‚ïë  ‚Ä¢ GET  /api/health                      ‚ïë
‚ïë  ‚Ä¢ POST /api/auth/login                  ‚ïë
‚ïë  ‚Ä¢ GET  /api/files                       ‚ïë
‚ïë  ‚Ä¢ GET  /api/files/:id                   ‚ïë
‚ïë  ‚Ä¢ POST /api/files                       ‚ïë
‚ïë  ‚Ä¢ POST /api/files/bulk                  ‚ïë
‚ïë  ‚Ä¢ DELETE /api/files/:id                 ‚ïë
‚ïë  ‚Ä¢ DELETE /api/files (clear all)         ‚ïë
‚ïë  ‚Ä¢ POST /api/sync                        ‚ïë
‚ïë  ‚Ä¢ GET  /api/stats                       ‚ïë
‚ïë  ‚Ä¢ GET  /api/files/search                ‚ïë
‚ïë  ‚Ä¢ GET  /api/export                      ‚ïë
‚ïë  ‚Ä¢ GET  /api/storage/info                ‚ïë
‚ïë  ‚Ä¢ GET  /api/storage/integrity           ‚ïë
‚ïë  ‚Ä¢ POST /api/storage/repair              ‚ïë
‚ïë  ‚Ä¢ POST /api/backup                      ‚ïë
‚ïë  ‚Ä¢ GET  /api/backups                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        `);
        
        console.log('\nüìä –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');
        console.log('üí° –î–ª—è –≤—Ö–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: admin / password\n');
    });
}

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
process.on('SIGINT', async () => {
    console.log('\n\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...');
    console.log('üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');
    
    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É –æ—á–∏—â–µ–Ω–Ω—è
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
    process.exit(0);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø—Ä–æ–º—ñ—Å—É:', reason);
});

// –ó–∞–ø—É—Å–∫
startServer().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
});
